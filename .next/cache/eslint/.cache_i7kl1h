[{"C:\\Work\\Apps\\FetchGPT\\pages\\api\\chat.ts":"1","C:\\Work\\Apps\\FetchGPT\\pages\\index.tsx":"2","C:\\Work\\Apps\\FetchGPT\\pages\\_app.tsx":"3","C:\\Work\\Apps\\FetchGPT\\pages\\_document.tsx":"4","C:\\Work\\Apps\\FetchGPT\\components\\ChatMessage.tsx":"5","C:\\Work\\Apps\\FetchGPT\\components\\Composer.tsx":"6","C:\\Work\\Apps\\FetchGPT\\components\\Link.tsx":"7","C:\\Work\\Apps\\FetchGPT\\components\\Settings.tsx":"8"},{"size":5367,"mtime":1682767739193,"results":"9","hashOfConfig":"10"},{"size":12598,"mtime":1682773026875,"results":"11","hashOfConfig":"10"},{"size":2370,"mtime":1682772842188,"results":"12","hashOfConfig":"10"},{"size":2900,"mtime":1682767739192,"results":"13","hashOfConfig":"10"},{"size":12485,"mtime":1682771593572,"results":"14","hashOfConfig":"10"},{"size":10870,"mtime":1682769089776,"results":"15","hashOfConfig":"10"},{"size":3204,"mtime":1682767739181,"results":"16","hashOfConfig":"10"},{"size":3538,"mtime":1682767739182,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ediz5e",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Work\\Apps\\FetchGPT\\pages\\api\\chat.ts",[],[],"C:\\Work\\Apps\\FetchGPT\\pages\\index.tsx",["43"],[],"import * as React from 'react';\r\n\r\nimport { Box, Container, IconButton, List, Option, Select, Sheet, Stack, Typography, useColorScheme, useTheme } from '@mui/joy';\r\nimport DarkModeIcon from '@mui/icons-material/DarkMode';\r\nimport Face6Icon from '@mui/icons-material/Face6';\r\nimport SettingsOutlinedIcon from '@mui/icons-material/SettingsOutlined';\r\nimport SmartToyOutlinedIcon from '@mui/icons-material/SmartToyOutlined';\r\nimport SmartToyTwoToneIcon from '@mui/icons-material/SmartToyTwoTone';\r\n\r\nimport { ChatMessage, UiMessage } from '../components/ChatMessage';\r\nimport { Composer } from '../components/Composer';\r\nimport { isValidOpenAIApiKey, loadGptModel, loadOpenAIApiKey, Settings } from '../components/Settings';\r\n\r\n\r\n/// Purpose configuration\r\n\r\ntype SystemPurpose = 'Catalyst' | 'Custom' | 'Developer' | 'Executive' | 'Generic' | 'Scientist';\r\n\r\nconst PurposeData: { [key in SystemPurpose]: { systemMessage: string; description: string | JSX.Element } } = {\r\n  Catalyst: {\r\n    systemMessage: 'You are a marketing extraordinaire for a booming startup fusing creativity, data-smarts, and digital prowess to skyrocket growth & wow audiences. So fun. Much meme. 🚀🎯💡',\r\n    description: 'The growth hacker with marketing superpowers 🚀',\r\n  },\r\n  Custom: {\r\n    systemMessage: 'You are ChatGPT, a large language model trained by OpenAI, based on the GPT-4 architecture.\\nKnowledge cutoff: 2021-09\\nCurrent date: {{Today}}',\r\n    description: 'User-defined purpose',\r\n  },\r\n  Developer: {\r\n    systemMessage: 'You are a sophisticated, accurate, and modern AI programming assistant',\r\n    description: <>Helps you code</>,\r\n  },\r\n  Executive: {\r\n    systemMessage: 'You are an executive assistant. Your communication style is concise, brief, formal',\r\n    description: 'Helps you write business emails',\r\n  },\r\n  Generic: {\r\n    systemMessage: 'You are ChatGPT, a large language model trained by OpenAI, based on the GPT-4 architecture.\\nKnowledge cutoff: 2021-09\\nCurrent date: {{Today}}',\r\n    description: 'Helps you think',\r\n  },\r\n  Scientist: {\r\n    systemMessage: 'You are a scientist\\'s assistant. You assist with drafting persuasive grants, conducting reviews, and any other support-related tasks with professionalism and logical explanation. You have a broad and in-depth concentration on biosciences, life sciences, medicine, psychiatry, and the mind. Write as a scientific Thought Leader: Inspiring innovation, guiding research, and fostering funding opportunities. Focus on evidence-based information, emphasize data analysis, and promote curiosity and open-mindedness',\r\n    description: 'Helps you write scientific papers',\r\n  },\r\n};\r\n\r\n\r\n/// UI Messages configuration\r\n\r\nconst MessageDefaults: { [key in UiMessage['role']]: Pick<UiMessage, 'role' | 'sender' | 'avatar'> } = {\r\n  system: {\r\n    role: 'system',\r\n    sender: 'Bot',\r\n    avatar: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/800px-ChatGPT_logo.svg.png\", //'https://em-content.zobj.net/thumbs/120/apple/325/robot_1f916.png',\r\n  },\r\n  user: {\r\n    role: 'user',\r\n    sender: 'You',\r\n    avatar: \"https://i.imgflip.com/6d2du4.png\", //https://mui.com/static/images/avatar/2.jpg',\r\n  },\r\n  assistant: {\r\n    role: 'assistant',\r\n    sender: 'Bot',\r\n    avatar: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/800px-ChatGPT_logo.svg.png\", // 'https://www.svgrepo.com/show/306500/openai.svg',\r\n  },\r\n};\r\n\r\nconst createUiMessage = (role: UiMessage['role'], text: string): UiMessage => ({\r\n  uid: Math.random().toString(36).substring(2, 15),\r\n  text: text,\r\n  model: '',\r\n  ...MessageDefaults[role],\r\n});\r\n\r\n\r\n/// Chat ///\r\n\r\nexport default function Conversation() {\r\n  const theme = useTheme();\r\n  const { mode: colorMode, setMode: setColorMode } = useColorScheme();\r\n\r\n  const [selectedSystemPurpose, setSelectedSystemPurpose] = React.useState<SystemPurpose>('Developer');\r\n  const [messages, setMessages] = React.useState<UiMessage[]>([]);\r\n  const [disableCompose, setDisableCompose] = React.useState(false);\r\n  const [settingsShown, setSettingsShown] = React.useState(false);\r\n  const messagesEndRef = React.useRef<HTMLDivElement | null>(null);\r\n\r\n  React.useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  React.useEffect(() => {\r\n    // show the settings at startup if the API key is not present\r\n    setColorMode('dark')\r\n    if (!isValidOpenAIApiKey(loadOpenAIApiKey()))\r\n      setSettingsShown(true);\r\n  }, []);\r\n\r\n  const handleDarkModeToggle = () => setColorMode(colorMode === 'dark' ? 'dark' : 'dark');\r\n\r\n  // setColorMode('dark')\r\n  handleDarkModeToggle();\r\n  const handleListClear = () => setMessages([]);\r\n\r\n  const handleListDelete = (uid: string) =>\r\n    setMessages(list => list.filter(message => message.uid !== uid));\r\n\r\n  const handleListEdit = (uid: string, newText: string) =>\r\n    setMessages(list => list.map(message => (message.uid === uid ? { ...message, text: newText } : message)));\r\n\r\n  const handleListRunAgain = (uid: string) => {\r\n    // take all messages until we get to uid, then remove the rest\r\n    const uidPosition = messages.findIndex(message => message.uid === uid);\r\n    if (uidPosition === -1) return;\r\n    const conversation = messages.slice(0, uidPosition + 1);\r\n    setMessages(conversation);\r\n\r\n    // disable the composer while the bot is replying\r\n    setDisableCompose(true);\r\n    getBotMessageStreaming(conversation)\r\n      .then(() => setDisableCompose(false));\r\n  };\r\n\r\n  const handlePurposeChange = (purpose: SystemPurpose | null) => {\r\n    if (!purpose) return;\r\n\r\n    if (purpose === 'Custom') {\r\n      const systemMessage = prompt('Enter your custom AI purpose', PurposeData['Custom'].systemMessage);\r\n      PurposeData['Custom'].systemMessage = systemMessage || '';\r\n    }\r\n\r\n    setSelectedSystemPurpose(purpose);\r\n  };\r\n\r\n\r\n  const getBotMessageStreaming = async (messages: UiMessage[]) => {\r\n    const response = await fetch('/api/chat', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ apiKey: loadOpenAIApiKey(), model: loadGptModel(), messages: messages }),\r\n    });\r\n\r\n    if (response.body) {\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder('utf-8');\r\n\r\n      const newBotMessage: UiMessage = createUiMessage('assistant', '');\r\n\r\n      while (true) {\r\n        const { value, done } = await reader.read();\r\n        if (done) break;\r\n\r\n        const messageText = decoder.decode(value);\r\n        newBotMessage.text += messageText;\r\n\r\n        // there may be a JSON object at the beginning of the message, which contains the model name (streaming workaround)\r\n        if (!newBotMessage.model && newBotMessage.text.startsWith('{')) {\r\n          const endOfJson = newBotMessage.text.indexOf('}');\r\n          if (endOfJson > 0) {\r\n            const json = newBotMessage.text.substring(0, endOfJson + 1);\r\n            try {\r\n              const parsed = JSON.parse(json);\r\n              newBotMessage.model = parsed.model;\r\n              newBotMessage.text = newBotMessage.text.substring(endOfJson + 1);\r\n            } catch (e) {\r\n              // error parsing JSON, ignore\r\n              console.log('Error parsing JSON: ' + e);\r\n            }\r\n          }\r\n        }\r\n\r\n        setMessages(list => {\r\n          // if missing, add the message at the end of the list, otherwise set a new list anyway, to trigger a re-render\r\n          const message = list.find(message => message.uid === newBotMessage.uid);\r\n          return !message ? [...list, newBotMessage] : [...list];\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleComposerSendMessage: (text: string) => void = (text) => {\r\n\r\n    // seed the conversation with a 'system' message\r\n    const conversation = [...messages];\r\n    if (!conversation.length) {\r\n      let systemMessage = PurposeData[selectedSystemPurpose].systemMessage;\r\n      systemMessage = systemMessage.replaceAll('{{Today}}', new Date().toISOString().split('T')[0]);\r\n      // conversation.push(createUiMessage('system', systemMessage));\r\n    }\r\n\r\n    // add the user message\r\n    conversation.push(createUiMessage('user', text));\r\n\r\n    // update the list of messages\r\n    setMessages(conversation);\r\n\r\n    // disable the composer while the bot is replying\r\n    setDisableCompose(true);\r\n    getBotMessageStreaming(conversation)\r\n      .then(() => setDisableCompose(false));\r\n  };\r\n\r\n\r\n  const listEmpty = !messages.length;\r\n\r\n  const Emoji = (props: any) => null;\r\n  setColorMode(colorMode === 'dark' ? 'dark' : 'dark')\r\n  return (\r\n    <Container maxWidth='xl' disableGutters sx={{\r\n      boxShadow: theme.vars.shadow.lg,\r\n    }}>\r\n      <Stack direction='column' sx={{\r\n        minHeight: '100vh',\r\n\r\n      }}>\r\n\r\n        {/* Application Bar */}\r\n        <Sheet variant='solid' invertedColors sx={{\r\n          position: 'sticky', top: 0, zIndex: 20, p: 1,\r\n          // background: theme.vars.palette.primary.solidHoverBg,\r\n          display: 'flex', flexDirection: 'row',\r\n          // justifyContent:\"start\",\r\n          alignItems: \"start\",\r\n          justifyContent: \"space-between\",\r\n          backgroundColor: \"black\",\r\n          paddingX: 2,\r\n\r\n        }}>\r\n          {/* <IconButton variant='plain' color='neutral' onClick={handleDarkModeToggle}>\r\n            <DarkModeIcon />\r\n          </IconButton> */}\r\n\r\n          {/*{!isEmpty && (*/}\r\n          {/*  <IconButton variant='plain' color='neutral' disabled={isDisabledCompose} onClick={onClearConversation}>*/}\r\n          {/*    <DeleteOutlineOutlinedIcon />*/}\r\n          {/*  </IconButton>*/}\r\n          {/*)} */}\r\n\r\n          <Typography sx={{\r\n            textAlign: 'center',\r\n            fontSize: '1.5rem', lineHeight: 1.75,\r\n            my: 'auto',\r\n            // flexGrow: 1,\r\n            fontWeight: 600,\r\n          }} onDoubleClick={handleListClear}>\r\n            FetchGPT\r\n          </Typography>\r\n\r\n          <IconButton variant='plain' color='primary' onClick={() => setSettingsShown(true)}>\r\n            <SettingsOutlinedIcon />\r\n          </IconButton>\r\n        </Sheet>\r\n\r\n        {/* Chat */}\r\n        <Box sx={{\r\n          flexGrow: 1,\r\n          background: theme.vars.palette.background.level1,\r\n        }}>\r\n          {listEmpty ? (\r\n            <Stack direction='column' sx={{ alignItems: 'center', justifyContent: 'center', minHeight: '50vh' }}>\r\n              <Box>\r\n                <Typography level='body3' color='neutral'>\r\n                  AI purpose\r\n                </Typography>\r\n                <Select value={selectedSystemPurpose} onChange={(e, v) => handlePurposeChange(v)} sx={{ minWidth: '40vw' }}>\r\n                  <Option value='Developer'><Emoji>👩‍💻</Emoji> Developer</Option>\r\n                  <Option value='Scientist'><Emoji>🔬</Emoji> Scientist</Option>\r\n                  <Option value='Executive'><Emoji>👔</Emoji> Executive</Option>\r\n                  <Option value='Catalyst'><Emoji>🚀</Emoji> Catalyst</Option>\r\n                  <Option value='Generic'><Emoji>🧠</Emoji> ChatGPT4</Option>\r\n                  <Option value='Custom'><Emoji>✨</Emoji> Custom</Option>\r\n                </Select>\r\n                <Typography level='body2' sx={{ mt: 2, minWidth: 260 }}>\r\n                  {PurposeData[selectedSystemPurpose].description}\r\n                </Typography>\r\n              </Box>\r\n            </Stack>\r\n          ) : (\r\n            <>\r\n              <List sx={{ p: 0 }}>\r\n                {messages.map((message, index) =>\r\n                  <ChatMessage key={'msg-' + message.uid} uiMessage={message}\r\n                    onDelete={() => handleListDelete(message.uid)}\r\n                    onEdit={newText => handleListEdit(message.uid, newText)}\r\n                    onRunAgain={() => handleListRunAgain(message.uid)} />)}\r\n                <div ref={messagesEndRef}></div>\r\n              </List>\r\n            </>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Compose */}\r\n        <Box sx={{\r\n          position: 'sticky', bottom: 0, zIndex: 10,\r\n          background: theme.vars.palette.background.body,\r\n          borderTop: '1px solid',\r\n          borderTopColor: theme.vars.palette.divider,\r\n          p: { xs: 1, md: 2 },\r\n        }}>\r\n          <Composer isDeveloper={selectedSystemPurpose === 'Developer'} disableSend={disableCompose} sendMessage={handleComposerSendMessage} />\r\n        </Box>\r\n\r\n      </Stack>\r\n\r\n      {/* Settings Modal */}\r\n      <Settings open={settingsShown} onClose={() => setSettingsShown(false)} />\r\n\r\n    </Container>\r\n  );\r\n}","C:\\Work\\Apps\\FetchGPT\\pages\\_app.tsx",[],[],"C:\\Work\\Apps\\FetchGPT\\pages\\_document.tsx",[],[],"C:\\Work\\Apps\\FetchGPT\\components\\ChatMessage.tsx",[],[],"C:\\Work\\Apps\\FetchGPT\\components\\Composer.tsx",[],[],"C:\\Work\\Apps\\FetchGPT\\components\\Link.tsx",[],[],"C:\\Work\\Apps\\FetchGPT\\components\\Settings.tsx",[],[],{"ruleId":"44","severity":1,"message":"45","line":96,"column":6,"nodeType":"46","endLine":96,"endColumn":8,"suggestions":"47"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'setColorMode'. Either include it or remove the dependency array.","ArrayExpression",["48"],{"desc":"49","fix":"50"},"Update the dependencies array to be: [setColorMode]",{"range":"51","text":"52"},[4512,4514],"[setColorMode]"]